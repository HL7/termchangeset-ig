<div xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://hl7.org/fhir ../../input-cache/schemas/R5/fhir-single.xsd">
    <a name="what"> </a>
    <h3> What is Protobuf? </h3>
    <p> Protocol buffers (Protobuf) are Google’s language-neutral, platform-neutral, extensible
        mechanism for serializing structured data (<a href="https://protobuf.dev/"
            >https://protobuf.dev/</a>). It allows us to send and receive structured Tinkar Data
        across a variety of data streams and using a variety of languages. You can read more about
        it here: <a href="https://protobuf.dev/overview/">https://protobuf.dev/overview/</a>. </p>
    <a name="why"> </a>
    <h3> Why Protobuf? </h3>
    <p> TBD </p>
    <a name="format"> </a>
    <h3> Tinkar Protobuf Format </h3>
    <p> Tinkar’s Protobuf format schema can be found on the <a href="protobufschema.html">Protobuf
            Schema</a> page. Data is sent and received by means of Protobuf Messages. The main
        components and types of Tinkar Protobuf Messages are defined below. </p>
    <a name="tinkarmsg"> </a>
    <h4> TinkarMsg </h4>
    <p> A TinkarMsg is the main way Tinkar’s Protobuf sends and receives data. It acts like a
        container and for one of four different types of messages. A TinkarMsg can be either a
        StampChronology, ConceptChronology, PatternChronology, or a SemanticChronology </p>
    <a name="stampchronology"> </a>
    <h4> StampChronology </h4>
    <p> A StampChronology is Tinkar’s way of referencing a Tinkar STAMP Coordinate. It contains a
        unique public_id to signify this unique coordinate and one or two StampVersion. </p>
    <a name="stampversion"> </a>
    <h4> StampVersion </h4>
    <p> A StampVersion is assigning the unique STAMP Coordinate Properties. It has a
        status_public_id, author_public_id, module_public_id, path_public_id all associated to the
        relevant STAMP component parts as well as a Google Protobuf Timestamp for the time
        component. </p>
    <a name="conceptchronology"> </a>
    <h4> ConceptChronology </h4>
    <p> A ConceptChronology is a type of message which gives a unique public_id associated to a
        concept one or more possible ConceptVersion </p>
    <a name="conceptversion"> </a>
    <h4> ConceptVersion </h4>
    <p> A ConceptVersion is a public_id of a StampChronology </p>
    <a name="PatternChronology"> </a>
    <h4> PatternChronology </h4>
    <p> A PatternChronology is message defining a Tinkar Pattern. It has a unique public_id
        associated to the pattern and one or more PatternVersion </p>
    <a name="PatternVersion"> </a>
    <h4> PatternVersion </h4>
    <p> A PatternVersion is a message containg a StampChronology, a public_id of the pattern’s
        referenced purpose concept, a public_id of the pattern’s referenced meaning concept, and one
        or more FieldDefinition </p>
    <a name="FieldDefinition"> </a>
    <h4> FieldDefinition </h4>
    <p> A FieldDefinition is message containing a public_id of the field’s meaning concept, a
        public_id of the field’s data type concept, a public_id of the field’s meaning concept, and
        an integer for the index/order of the field associated to the pattern. </p>
    <a name="SemanticChronology"> </a>
    <h4> SemanticChronology </h4>
    <p> A SemanticChronology is a message assigning values to a pattern’s one or more Fields
        associated to a concept. It contains a unique public_id associated to the semantic, a
        public_id associated to the concept, a public_id associated to the pattern, and one or more
        SemanticVersion </p>
    <a name="SemanticVersion"> </a>
    <h4>SemanticVersion </h4>
    <p> A SemanticVersion assigns the values of a pattern to a STAMP coordinate. It contains a
        public_id assocaited to the StampChronology and one or more Fields (Fields are the DataTypes
        and can be found in the Protobuf Format) based on how many FieldDefinition’s are in the
        pattern. </p>
    <a name="importexport"> </a>
    <h3> Import/Export Protobuf Messages </h3>
    <p> To Import/Export Protobuf Messages into Tinkar Data it’s important to get the associated
        public_id’s correct. It can cause issues if you are sending a message referencing a
        public_id for a FieldDefinition’s data type component but end up referencing a public_id
        associated to a StampChronology. There needs to be a way to correlate public_id’s from the
        sending and receiving systems. There can also be issues if you are referencing a public_id
        for a concept the receiving system doesn’t contain </p>
    <a name="usecase1"> </a>
    <h4> Use Case 1: Changing a SNOMED Concept’s Semantic Value </h4>
    <p> In this case we want to simulate a change for a SNOMED Concept’s value. As SNOMED is updated
        with new versions, new rules and Axiom Definitions are assigned to concepts. In this use
        case we will simulate an update to Chronic Lung Disease on the United Stated Edition from
        the 2020-09-01 version to the 2021-03-01 version. </p>
    <p>
        The 2020-09-01 Version of Chronic Lung Disease
    </p>
    <p>
        <img src="20200901chroniclungdisease.png" alt="2020-09-01 Chronic Lung Disease"/>
    </p>
    <br />
    <p>
        The 2021-03-01 Version of Chronic Lung Disease
    </p>
    <p>
        <img src="20210301chroniclungdisease.png" alt="2021-03-01 Chronic Lung Disease"/>
    </p>
    <br />
    <a name="message1"> </a>
    <h4>
        Message 1: Creating a new Tinkar STAMP Coordinate
    </h4>
    <p>
        This message model create a new STAMP Coordinate and assigns the values to the Public ID’s and the protobuf timestamp. An issue could occur if the receiver of the message doesn’t have the necessary concepts and public ID’s that the message is sending. For example, a recipient might not have the unique Author Public ID in certain cases. If this is the case the specific author coordinate would have to be sent as a TinkarMsg with Primordial Modules + Paths first.
    </p>
    <code class="language-java">
        message TinkarMsg {
        StampChronology {
        PublicId public_id = "NEW STAMP CHRONOLOGY Public ID";
        
        // The stamp version.
        StampVersion first_stamp_version =  StampVersion {
        // Status of the item this STAMP references.
        PublicId status_public_id = "Active Status Public ID";
        
        // Author of the item this STAMP references.
        PublicId author_public_id = "SNOMED CT Author Public ID";
        
        // Module of the item this STAMP references.
        PublicId module_public_id = "SNOMED CT US EDITION Public ID";
        
        // Path of the item this STAMP references.
        PublicId path_public_id = "Development Path Public ID";
        
        // Creation time of the item this STAMP references.
        google.protobuf.Timestamp time = "Current Date/Time";// Or if we wanted to simulate the update this would be the 2021-03-01 Timestamp
        };        
        }
        }
    </code>
</div>

